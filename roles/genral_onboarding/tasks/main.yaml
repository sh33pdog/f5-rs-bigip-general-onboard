---
#general bigip onboarding for f5-rs, hardening, templates and default profiels.

- name: Wait until BIG-IP is ready to make changes
  delegate_to: "{{bigip_ip_addr}}"
  raw: "run /util bash -c 'cat /var/prompt/ps1'"
  until: (result.stdout.find("Active") != -1 or result.stdout.find("Standby") != -1 or result.stdout.find("Unlicensed") != -1)
  register: result
  retries: 60
  delay: 30
  ignore_errors: yes

- name: Configures hostname
  bigip_command: 
    commands: "modify /sys global-settings hostname {{ service_name }}-{{ branch }}-{{ aws_region}}-bigip.com"
  delegate_to: localhost

  
- name: change advisory text
  bigip_command: 
    commands: "modify sys db ui.advisory.text { value {{ service_name }}-{{ branch }}-{{ aws_region}}-bigip.com }"
  delegate_to: localhost

- name: change advisory status
  bigip_command: 
    commands: modify sys db ui.advisory.enabled { value "true" }
  delegate_to: localhost

- name: Configures advisory color
  bigip_command: 
    commands: modify sys db ui.advisory.color { value orange }
  delegate_to: localhost
  when: branch == "dev"  

  
- name: install websafe license id 
  delegate_to: "{{bigip_ip_addr}}"
  raw: "modify sys db license.antifraud.id value {{ vault_websafe_license_id }}"

# notice that you need to run it on every device in the cluster     
- name: install websafe license applicationencryption
  delegate_to: "{{bigip_ip_addr}}"
  raw: "modify sys db license.antifraud.applicationencryption value {{ vault_websafe_license_application_encryption }}"
  
# notice that you need to run it on every device in the cluster   
- name: install websafe license malwaredetection 
  delegate_to: "{{bigip_ip_addr}}"
  raw: "modify sys db license.antifraud.malwaredetection value {{ vault_websafe_license_malwaredetection }}"

# notice that you need to run it on every device in the cluster     
- name: install websafe license phishingdetection 
  delegate_to: "{{bigip_ip_addr}}"
  raw: "modify sys db license.antifraud.phishingdetection  value {{ vault_websafe_license_application_phishingdetection  }}"
  
# notice that you need to run it on every device in the cluster   
- name: install websafe license automatictransactiondetection 
  delegate_to: "{{bigip_ip_addr}}"
  raw: "modify sys db license.antifraud.automatictransactiondetection  value {{ vault_websafe_license_automatictransactiondetection }}"

# notice that you need to run it on every device in the cluster   
- name: install websafe license mobilesafe 
  delegate_to: "{{bigip_ip_addr}}"
  raw: "modify sys db license.antifraud.mobilesafe  value {{ vault_websafe_license_mobilesafe }}"  
   
- name: Install iApp Template for Virtual Service Insertion
  bigip_iapp_template:
    state: "{{ state }}"
    content: "{{ lookup('file', 'appsvcs_v2.0.004' + '.tmpl') }}"
    force: yes
  delegate_to: localhost
  
- name: Install iApp Template for Service Discovery of Pool Members
  delegate_to: localhost
  bigip_iapp_template:
    state: "{{ state }}"
    content: "{{ lookup('file', sd_iApp_template_name + '.tmpl') }}"
    force: yes
    partition: "{{partition}}"

- name: Install analytics iapp template 
  delegate_to: localhost
  bigip_iapp_template:
    state: "{{ state }}"
    content: "{{ lookup('file', 'f5.analytics.v3.7.1rc4' + '.tmpl') }}"
    force: yes
    partition: "{{partition}}"

- name: Deploy analytics service 
  delegate_to: localhost
  bigip_iapp_service:
      state: "{{ state }}"
      partition: "{{partition}}"
      name: "analytics-splunk"
      template: "/Common/f5.analytics.v3.7.1rc4"
      parameters: "{{ lookup('template', 'analytics.json') }}"
      strict_updates: "{{ strict_updates }}"
  register: result




- name: Getting bigip authentication token
  delegate_to: localhost
  uri:
    body: '{"username":"{{vault_bigip_rest_user}}","password":"{{vault_bigip_rest_password}}","loginProvidername":"tmos"}'
    body_format: json
    method: POST
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/shared/authn/login"
    status_code: 200
    validate_certs: no
  register: bigip_auth_response
  
- name: assinging auth token to a variable 
  set_fact:
    bigip_auth_token: "{{ bigip_auth_response.json.token.token }}"

- name: Deploying updating ASM Logging Profile to send to Remote Analytics Server
  delegate_to: localhost
  uri:
    body: "{{ lookup('template', 'asm_logging_profile_payload.j2') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
    method: POST
    status_code: 200, 201, 409
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/tm/security/log/profile"
    validate_certs: no

- name: Deploying updating ASM Logging ALL Profile
  delegate_to: localhost
  uri:
    body: "{{ lookup('template', 'asm_logging_profile_all_payload.j2') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
    method: POST
    status_code: 200, 201, 409
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/tm/security/log/profile"
    validate_certs: no

- name: Deploying updating AVR profile
  delegate_to: localhost
  uri:
    body: "{{ lookup('template', 'avr_profile_payload.j2') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
    method: POST
    status_code: 200, 201, 409
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/tm/ltm/profile/analytics"
    validate_certs: no

- name: Deploying updating HTTP profile
  delegate_to: localhost
  uri:
    body: "{{ lookup('template', 'rs_http_profile_payload.j2') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
    method: POST
    status_code: 200, 201, 409
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/tm/ltm/profile/http"
    validate_certs: no
    
- name: Deploying updating DOSL7 profile
  delegate_to: localhost
  uri:
    body: "{{ lookup('file', 'dosl7_profile_payload.json') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
    method: POST
    status_code: 200, 201, 409
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/tm/security/dos/profile"
    validate_certs: no

- name: Deploying FPS profile
  delegate_to: localhost
  uri:
    body: "{{ lookup('template', 'fps_profile_payload.j2') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
    method: POST
    status_code: 200, 201, 409
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/tm/security/anti-fraud/profile"
    validate_certs: no

- name: creating DNS resolver
  delegate_to: localhost
  uri:
    body: "{{ lookup('template', 'dns_resolver.j2') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
    method: POST
    status_code: 200, 201, 409
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/tm/net/dns-resolver"
    validate_certs: no
    
    
#####################Deploying profiles again because of some consistency issues. sometimes the rest call is successful but profile wasn't actually created.
###############################################################################################################################################################

- name: Deploying updating ASM Logging Profile to send to Remote Analytics Server
  delegate_to: localhost
  uri:
    body: "{{ lookup('template', 'asm_logging_profile_payload.j2') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
    method: POST
    status_code: 200, 201, 409
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/tm/security/log/profile"
    validate_certs: no

- name: Deploying updating ASM Logging ALL Profile
  delegate_to: localhost
  uri:
    body: "{{ lookup('template', 'asm_logging_profile_all_payload.j2') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
    method: POST
    status_code: 200, 201, 409
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/tm/security/log/profile"
    validate_certs: no

- name: Deploying updating AVR profile
  delegate_to: localhost
  uri:
    body: "{{ lookup('template', 'avr_profile_payload.j2') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
    method: POST
    status_code: 200, 201, 409
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/tm/ltm/profile/analytics"
    validate_certs: no

- name: Deploying updating HTTP profile
  delegate_to: localhost
  uri:
    body: "{{ lookup('template', 'rs_http_profile_payload.j2') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
    method: POST
    status_code: 200, 201, 409
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/tm/ltm/profile/http"
    validate_certs: no
    
- name: Deploying updating DOSL7 profile
  delegate_to: localhost
  uri:
    body: "{{ lookup('file', 'dosl7_profile_payload.json') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
    method: POST
    status_code: 200, 201, 409
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/tm/security/dos/profile"
    validate_certs: no

- name: Deploying FPS profile
  delegate_to: localhost
  uri:
    body: "{{ lookup('template', 'fps_profile_payload.j2') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
    method: POST
    status_code: 200, 201, 409
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/tm/security/anti-fraud/profile"
    validate_certs: no

    
############installing AS3#############################

- name: get rpm lenth
  shell: "wc -c {{ role_path }}/files/{{ as3_rpm }} | cut -f 1 -d ' '"
  register: as3_rpm_len_output
  
- name: put rpm len in a variable
  set_fact: 
    as3_rpm_len: "{{ as3_rpm_len_output.stdout }}"

- name: enable iappLX
  delegate_to: "{{bigip_ip_addr}}"
  raw: "run /util bash -c 'touch /var/config/rest/iapps/enable'"

- name: uploading AS3 package
  shell: "curl -kv https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/shared/file-transfer/uploads/{{ as3_rpm }} -H 'Content-Type: application/octet-stream' -H 'Content-Range: 0-{{ as3_rpm_len | int -1 }}/{{ as3_rpm_len}}' -H 'Content-Length: {{ as3_rpm_len}}' -H 'Connection: keep-alive' -H 'X-F5-Auth-Token: {{ bigip_auth_token }}' --data-binary @{{ role_path }}/files/{{ as3_rpm }}"
  register: installation
  
- name: set as3 install command
  set_fact: 
    as3_install_cmd: "'{'operation':'INSTALL','packageFilePath':'/var/config/rest/downloads/{{ as3_rpm }}'}'"

- name: installing as3 package
  delegate_to: localhost
  uri:
    body: "{{ lookup('template', 'as3_install_cmd.json') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
      Origin: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}"
    method: POST
    status_code: 202, 200, 409
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/shared/iapp/package-management-tasks"
    validate_certs: no

############installing Declarative WAF#############################

- name: get rpm lenth
  shell: "wc -c {{ role_path }}/files/{{ declerative_waf_rpm }} | cut -f 1 -d ' '"
  register: declerative_waf_rpm_len_output
  
- name: put rpm len in a variable
  set_fact: 
    declerative_waf_rpm_len: "{{ declerative_waf_rpm_len_output.stdout }}"

- name: uploading declerative_waf package
  shell: "curl -kv https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/shared/file-transfer/uploads/{{ declerative_waf_rpm }} -H 'Content-Type: application/octet-stream' -H 'Content-Range: 0-{{ declerative_waf_rpm_len | int -1 }}/{{ declerative_waf_rpm_len}}' -H 'Content-Length: {{ declerative_waf_rpm_len}}' -H 'Connection: keep-alive' -H 'X-F5-Auth-Token: {{ bigip_auth_token }}' --data-binary @{{ role_path }}/files/{{ declerative_waf_rpm }}"
  register: installation
  
- name: set declerative_waf install command
  set_fact: 
    declerative_waf_install_cmd: "'{'operation':'INSTALL','packageFilePath':'/var/config/rest/downloads/{{ declerative_waf_rpm }}'}'"

- name: installing declerative_waf_rpm package
  delegate_to: localhost
  uri:
    body: "{{ lookup('template', 'declerative_waf_install_cmd.json') }}"
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
      Origin: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}"
    method: POST
    status_code: 202, 200, 409
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/shared/iapp/package-management-tasks"
    validate_certs: no
############################## saving bigip config####################   
    
- name: Saving the bigip config
  delegate_to: localhost
  uri:
    body: '{"command":"save"}'
    body_format: json
    headers:
      X-F5-Auth-Token: "{{ bigip_auth_token }}"
    method: POST
    status_code: 200, 201, 409
    url: "https://{{ bigip_ip_addr }}:{{ bigip_mgmt_port }}/mgmt/tm/sys/config"
    validate_certs: no
